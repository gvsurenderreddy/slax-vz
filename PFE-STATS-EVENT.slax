/*
$Id$
*/

version 1.0;
ns Junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
import "../import/junos.xsl";

/*
 * Author        : Nadeem Mohammad
 * Version       : 1.0
 * Last Modified : Feb 24th, 2014
 * Platform      : MX
 * Release       : 12.3 and above
 *
 * Description   : This event/op script takes treshold values as arguments and
		   runs periodically every five minutes
		   and checks for pfe traffic statistics. it saves the read
		   values to a accounting profile file and later reads back
		   from it. it then calculates a delta for all the captured
		   counters and then compares that delta with the specified
		   treshold value that is not to be crossed. if delta 
		   exceeds this treshold value it will log a pfe error.
 *
 * =============================================================================
 * Revision History
 * -----------------------------------------------------------------------------
 * 1.0: Feb 24th, 2014
 *      - Initial Release
 * 
 *
 * =============================================================================
 *
 * To set this up on your JUNOS device copy this script to the following folder:
 * /var/db/scripts/event
 *
 * Then configure JUNOS with the following:
 * 'set event-options event-script file PFE-STATS-EVENT.slax'
 * 'set 
 *
 * Make sure you name the script 'PFE-STATS-EVENT' or change references in
 * the script and JUNOS config to be whatever you named it.
 *
 */

var $event-definition = {
    <event-options> {
        <generate-event> {
        <name> "every-five-mins";
        <time-interval> "300";
        }
        <policy> {
            <name> "check-pfe-stats";
            <events> "every-five-mins";
            <then> {
                <event-script> {
                <name> "PFE-STATS-EVENT.slax";
                }
            }
        }
    }
}

var $arguments = {
        <argument> {
                <name> "soft-input-control-drop-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "soft-input-high-drop-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "soft-input-medium-drop-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "soft-input-low-drop-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "soft-output-drop-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "hardware-input-drop-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "hardware-timeout-discards-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "hardware-truncated-key-discards-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "hardware-bits-to-test-discards-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "hardware-data-error-discards-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "hardware-stack-underflow-discards-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "hardware-stack-overflow-discards-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "hardware-normal-discards-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "hardware-extended-discards-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "hardware-invalid-interface-discards-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "hardware-info-cell-drops-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "hardware-fabric-drops-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "pfe-input-checksum-error-tresh";
                <description> "treshold value not to be crossed";
        }
        <argument> {
                <name> "pfe-output-mtu-error-tresh";
                <description> "treshold value not to be crossed";
        }
}


/* Default treshold values for counters*/

param $soft-input-control-drop-tresh = 0;
param $soft-input-high-drop-tresh = 0;
param $soft-input-medium-drop-tresh = 0;
param $soft-input-low-drop-tresh = 0;
param $soft-output-drop-tresh = 0;
param $hardware-input-drop-tresh = 0;
param $hardware-timeout-discards-tresh = 0;
param $hardware-truncated-key-discards-tresh = 0;
param $hardware-bits-to-test-discards-tresh = 0;
param $hardware-data-error-discards-tresh = 0;
param $hardware-stack-underflow-discards-tresh = 0;
param $hardware-stack-overflow-discards-tresh = 0;
param $hardware-normal-discards-tresh = 0;
param $hardware-extended-discards-tresh = 0;
param $hardware-invalid-interface-discards-tresh = 0;
param $hardware-info-cell-drops-tresh = 0;
param $hardware-fabric-drops-tresh = 0;
param $pfe-input-checksum-error-tresh = 0;
param $pfe-output-mtu-error-tresh = 0;


match / {

  <op-script-results> {

      var $file = "pfe-stats.acct";

      /*retrieve previously saved values if any from existing accounting profile */
      var $previous-stats := { call get_saved_pfe_stats($file); };

      copy-of $previous-stats;

      /* parse the firs pfe. if the file doesnt exists or empty this will return empty */
      var $pfe-value = $previous-stats//file-accounting-record/profile-layout;

      if ($pfe-value != " ") {
     
          call get_and_save_pfe_stats($file);

          /*retrieve new values from accounting profile */
   	  var $saved-data-after-delay := { call get_saved_pfe_stats($file); };

	  copy-of $saved-data-after-delay;

	  for-each ($saved-data-after-delay//file-accounting-record) {
	     var $first-pfe = ./profile-layout;
	     var $first-time = ./epoch-timestamp;
	     var $first-sft-in-c-drps = ./sft-in-c-drps;
	     var $first-sft-in-h-drps = ./sft-in-h-drps;
	     var $first-sft-in-m-drps = ./sft-in-m-drps;
	     var $first-sft-in-l-drps = ./sft-in-l-drps;
	     var $first-sft-out-l-drps = ./sft-out-l-drps;
	     var $first-hrd-in-drps = ./hrd-in-drps;

	     var $first-hrd-tme-dscd = ./hrd-tme-dscd;
	     var $first-hrd-trnc-key-dscd = ./hrd-trnc-key-dscd;
	     var $first-hrd-bts-to-tst-dscd = ./hrd-bts-to-tst-dscd;
	     var $first-hrd-data-err-dscd = ./hrd-data-err-dscd;
	     var $first-hrd-stck-under-dscd = ./hrd-stck-under-dscd;
	     var $first-hrd-stck-ovr-dscd = ./hrd-stck-ovr-dscd;
	     var $first-hrd-bad-rt-dscd = ./hrd-bad-rt-dscd;
	     var $first-hrd-nxthp-dscd = ./hrd-nxthp-dscd;
	     var $first-hrd-invld-intf-dscd = ./hrd-invld-intf-dscd;
	     var $first-hrd-info-cell-dscd = ./hrd-info-cell-dscd;
	     var $first-hrd-fabric-dscd = ./hrd-fabric-dscd;

	     var $first-chip-inpt-chksm-errs = ./chip-inpt-chksm-errs;
             var $first-chip-out-mtu-errs = ./chip-out-mtu-errs;

/*	<output> "FIRST pfe " _ $first_pfe _ " time = " _ $first_time _ " software drops = " _ $first-sft-in-c-drps;*/
	    for-each ($saved-data-after-delay//file-accounting-record) {
	        var $second-pfe = ./profile-layout;
	    	var $second-time = ./epoch-timestamp;
	    	var $second-sft-in-c-drps = ./sft-in-c-drps;
	    	var $second-sft-in-h-drps = ./sft-in-h-drps;
	    	var $second-sft-in-m-drps = ./sft-in-m-drps;
	    	var $second-sft-in-l-drps = ./sft-in-l-drps;
	    	var $second-sft-out-l-drps = ./sft-out-l-drps;
	    	var $second-hrd-in-drps = ./hrd-in-drps;

	    	var $second-hrd-tme-dscd = ./hrd-tme-dscd;
	    	var $second-hrd-trnc-key-dscd = ./hrd-trnc-key-dscd;
	    	var $second-hrd-bts-to-tst-dscd = ./hrd-bts-to-tst-dscd;
	    	var $second-hrd-data-err-dscd = ./hrd-data-err-dscd;
	    	var $second-hrd-stck-under-dscd = ./hrd-stck-under-dscd;
	    	var $second-hrd-stck-ovr-dscd = ./hrd-stck-ovr-dscd;
	    	var $second-hrd-bad-rt-dscd = ./hrd-bad-rt-dscd;
	    	var $second-hrd-nxthp-dscd = ./hrd-nxthp-dscd;
	    	var $second-hrd-invld-intf-dscd = ./hrd-invld-intf-dscd;
	    	var $second-hrd-info-cell-dscd = ./hrd-info-cell-dscd;
	    	var $second-hrd-fabric-dscd = ./hrd-fabric-dscd;

	    	var $second-chip-inpt-chksm-errs = ./chip-inpt-chksm-errs;
            	var $second-chip-out-mtu-errs = ./chip-out-mtu-errs;

/*	<output> "SECOND pfe " _ $second_pfe _ " time = " _ $second_time _ " software drops = " _ $second-sft-in-c-drps;*/

	    	if ($second-pfe == $first-pfe &&
	            $second-time > $first-time) {

	     	    var $delta-sft-in-c-drps = $second-sft-in-c-drps - $first-sft-in-c-drps;
		    if ( $delta-sft-in-c-drps > $soft-input-control-drop-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $soft-input-control-drop-tresh _ " for software input control drops exceeded by: " _ $delta-sft-in-c-drps;
                       expr jcs:syslog( "pfe.error", $syslog_message);
/*		       <output> $first-pfe _ " Delta for software intput control drops: " _ $delta-sft-in-c-drps _ "crossed treshold of: " _ $soft-input-control-drop-tresh;*/
		    }

	     	    var $delta-sft-in-h-drps = $second-sft-in-h-drps - $first-sft-in-h-drps;
		    if ( $delta-sft-in-h-drps > $soft-input-high-drop-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $soft-input-high-drop-tresh _ " for software input high drops exceeded by: " _ $delta-sft-in-h-drps;
                       expr jcs:syslog( "pfe.error", $syslog_message);
/*		       <output> $first-pfe _ " Delta for software intput high drops: " _ $delta-sft-in-h-drps _ "crossed treshold of: " _ $soft-input-high-drop-tresh;*/
		    }

	     	    var $delta-sft-in-m-drps = $second-sft-in-m-drps - $first-sft-in-m-drps;
		    if ( $delta-sft-in-m-drps > $soft-input-medium-drop-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $soft-input-medium-drop-tresh _ " for software input medium drops exceeded by: " _ $delta-sft-in-m-drps;
                       expr jcs:syslog( "pfe.error", $syslog_message);
/*		       <output> $first-pfe _ " Delta for software intput medium drops: " _ $delta-sft-in-m-drps _ "crossed treshold of: " _ $soft-input-medium-drop-tresh;*/
		    }

	     	    var $delta-sft-in-l-drps = $second-sft-in-l-drps - $first-sft-in-l-drps;
		    if ( $delta-sft-in-l-drps > $soft-input-low-drop-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $soft-input-low-drop-tresh _ " for software input low drops exceeded by: " _ $delta-sft-in-l-drps;
                       expr jcs:syslog( "pfe.error", $syslog_message);
		       <output> $first-pfe _ " Delta for software intput low drops: " _ $delta-sft-in-l-drps _ "crossed treshold of: " _ $soft-input-low-drop-tresh;
		    }

	     	    var $delta-sft-out-l-drps = $second-sft-out-l-drps - $first-sft-out-l-drps;
		    if ( $delta-sft-out-l-drps > $soft-output-drop-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $soft-output-drop-tresh _ " for software output drops exceeded by: " _ $delta-sft-out-l-drps;
                       expr jcs:syslog( "pfe.error", $syslog_message);
/*		       <output> $first-pfe _ " Delta for software output drops: " _ $delta-sft-out-l-drps _ "crossed treshold of: " _ $soft-output-drop-tresh;*/
		    }

	     	    var $delta-hrd-in-drps = $second-hrd-in-drps - $first-hrd-in-drps;
		    if ( $delta-hrd-in-drps > $hardware-input-drop-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $hardware-input-drop-tresh _ " for hardware input drops exceeded by: " _ $delta-hrd-in-drps;
                       expr jcs:syslog( "pfe.error", $syslog_message);
		       <output> $first-pfe _ " Delta for hardware input drops: " _ $delta-hrd-in-drps _ "crossed treshold of: " _ $hardware-input-drop-tresh;
		    }

	     	    var $delta-hrd-tme-dscd = $second-hrd-tme-dscd - $first-hrd-tme-dscd;
		    if ( $delta-hrd-tme-dscd > $hardware-timeout-discards-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $hardware-timeout-discards-tresh _ " for hardware timeout discards exceeded by: " _ $delta-hrd-tme-dscd;
                       expr jcs:syslog( "pfe.error", $syslog_message);
		    }

	     	    var $delta-hrd-trnc-key-dscd = $second-hrd-trnc-key-dscd - $first-hrd-trnc-key-dscd;
		    if ( $delta-hrd-trnc-key-dscd > $hardware-truncated-key-discards-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $hardware-truncated-key-discards-tresh _ " for hardware timeout discards exceeded by: " _ $delta-hrd-trnc-key-dscd;
                       expr jcs:syslog( "pfe.error", $syslog_message);
		    }

	     	    var $delta-hrd-bts-to-tst-dscd = $second-hrd-bts-to-tst-dscd - $first-hrd-bts-to-tst-dscd;
		    if ( $delta-hrd-bts-to-tst-dscd > $hardware-bits-to-test-discards-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $hardware-bits-to-test-discards-tresh _ " for hardware bits to test discards exceeded by: " _ $delta-hrd-bts-to-tst-dscd;
                       expr jcs:syslog( "pfe.error", $syslog_message);
		    }

	            var $delta-hrd-data-err-dscd = $second-hrd-data-err-dscd - $first-hrd-data-err-dscd;
		    if ( $delta-hrd-data-err-dscd > $hardware-data-error-discards-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $hardware-data-error-discards-tresh _ " for hardware data error discards exceeded by: " _ $delta-hrd-data-err-dscd;
                       expr jcs:syslog( "pfe.error", $syslog_message);
		    }

	            var $delta-hrd-stck-under-dscd = $second-hrd-stck-under-dscd - $first-hrd-stck-under-dscd;
		    if ( $delta-hrd-stck-under-dscd > $hardware-stack-underflow-discards-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $hardware-stack-underflow-discards-tresh _ " for hardware stack underflow discards exceeded by: " _ $delta-hrd-stck-under-dscd;
                       expr jcs:syslog( "pfe.error", $syslog_message);
		    }

	            var $delta-hrd-stck-ovr-dscd = $second-hrd-stck-ovr-dscd - $first-hrd-stck-ovr-dscd;
		    if ( $delta-hrd-stck-ovr-dscd > $hardware-stack-overflow-discards-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $hardware-stack-overflow-discards-tresh _ " for hardware stack overflow discards exceeded by: " _ $delta-hrd-stck-ovr-dscd;
                       expr jcs:syslog( "pfe.error", $syslog_message);
		    }

	            var $delta-hrd-bad-rt-dscd = $second-hrd-bad-rt-dscd - $first-hrd-bad-rt-dscd;
		    if ( $delta-hrd-bad-rt-dscd > $hardware-normal-discards-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $hardware-normal-discards-tresh _ " for hardware normal dscd exceeded by: " _ $delta-hrd-bad-rt-dscd;
                       expr jcs:syslog( "pfe.error", $syslog_message);
/*		       <output> $first-pfe _ " Delta for hardware normal drops: " _ $delta-hrd-bad-rt-dscd _ "crossed treshold of: " _ $hardware-normal-discards-tresh;*/
		    }

	            var $delta-hrd-nxthp-dscd = $second-hrd-nxthp-dscd - $first-hrd-nxthp-dscd;
		    if ( $delta-hrd-nxthp-dscd > $hardware-extended-discards-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $hardware-extended-discards-tresh _ " for hardware extended dscd exceeded by: " _ $delta-hrd-nxthp-dscd;
                       expr jcs:syslog( "pfe.error", $syslog_message);
		    }

	            var $delta-hrd-invld-intf-dscd = $second-hrd-invld-intf-dscd - $first-hrd-invld-intf-dscd;
		    if ( $delta-hrd-invld-intf-dscd > $hardware-invalid-interface-discards-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $hardware-invalid-interface-discards-tresh _ " for hardware invalid interface dscd exceeded by: " _ $delta-hrd-invld-intf-dscd;
                       expr jcs:syslog( "pfe.error", $syslog_message);
		    }

	            var $delta-hrd-info-cell-dscd = $second-hrd-info-cell-dscd - $first-hrd-info-cell-dscd;
		    if ( $delta-hrd-invld-intf-dscd > $hardware-info-cell-drops-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $hardware-info-cell-drops-tresh _ " for hardware info cell drops exceeded by: " _ $delta-hrd-info-cell-dscd;
                       expr jcs:syslog( "pfe.error", $syslog_message);
		    }

	            var $delta-hrd-fabric-dscd = $second-hrd-fabric-dscd - $first-hrd-fabric-dscd;
		    if ( $delta-hrd-fabric-dscd > $hardware-fabric-drops-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $hardware-fabric-drops-tresh _ " for hardware fabric drops exceeded by: " _ $delta-hrd-fabric-dscd;
                       expr jcs:syslog( "pfe.error", $syslog_message);
		    }

	            var $delta-chip-inpt-chksm-errs = $second-chip-inpt-chksm-errs - $first-chip-inpt-chksm-errs;
		    if ( $delta-chip-inpt-chksm-errs > $pfe-input-checksum-error-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $pfe-input-checksum-error-tresh _ " for pfe input checksum errors exceeded by: " _ $delta-chip-inpt-chsm-errs;
                       expr jcs:syslog( "pfe.error", $syslog_message);
		    }

	            var $delta-chip-out-mtu-errs = $second-chip-out-mtu-errs - $first-chip-out-mtu-errs;
		    if ( $delta-chip-out-mtu-errs > $pfe-output-mtu-error-tresh ) {
	               var $syslog_message = $first-pfe _ " Treshold value: " _ $pfe-output-mtu-error-tresh _ " for pfe output mtu errors exceeded by: " _ $delta-chip-out-mtu-errs;
                       expr jcs:syslog( "pfe.error", $syslog_message);
		    }
	        }
	    }
        }
    } else {
        /* get pfe stats and save them to the file */
	call get_and_save_pfe_stats($file);
    }
 
  }
}


template get_and_save_pfe_stats($file) {
    var $chassis = jcs:invoke('get-chassis-inventory');

      for-each ($chassis//chassis-module[starts-with(name, "FPC ")]) {  
        var $reg1 = jcs:regex("(FPC) +([0-9]+)", ./name);
	var $slot = $reg1[3];
        
	var $pfe-stats := {call get_pfe_statistics( $slot ); };

        var $pfe-software-input-control-drops = $pfe-stats/pfe-counters/pfe-software-input-control-drop-count;
        var $pfe-software-input-high-drops =  $pfe-stats/pfe-counters/pfe-software-input-high-drop-count;
	var $pfe-software-input-medium-drops = $pfe-stats/pfe-counters/pfe-software-input-medium-drop-count;
	var $pfe-software-input-low-drops = $pfe-stats/pfe-counters/pfe-software-input-low-drop-count;
	var $pfe-software-output-low-drops = $pfe-stats/pfe-counters/pfe-software-output-low-drop-count;
	var $pfe-hardware-input-drops = $pfe-stats/pfe-counters/pfe-hardware-input-drop-count;
	var $pfe-hardware-timeout-discards = $pfe-stats/pfe-counters/pfe-hardware-timeout-discard-count;
	var $pfe-hardware-truncated-key-discards = $pfe-stats/pfe-counters/pfe-hardware-truncated-key-discard-count;
	var $pfe-hardware-bits-to-test-discards = $pfe-stats/pfe-counters/pfe-hardware-bits-to-test-discard-count;
	var $pfe-hardware-data-error-discards = $pfe-stats/pfe-counters/pfe-hardware-data-error-discard-count;
	var $pfe-hardware-stack-underflow-discards = $pfe-stats/pfe-counters/pfe-hardware-stack-underflow-discard-count;
	var $pfe-hardware-stack-overflow-discards = $pfe-stats/pfe-counters/pfe-hardware-stack-overflow-discard-count;
	var $pfe-hardware-bad-route-discards = $pfe-stats/pfe-counters/pfe-hardware-bad-route-discard-count;
	var $pfe-hardware-nexthop-discards = $pfe-stats/pfe-counters/pfe-hardware-nexthop-discard-count;
	var $pfe-hardware-invalid-intf-discards = $pfe-stats/pfe-counters/pfe-hardware-invalid-intf-discard-count;
	var $pfe-hardware-info-cell-discards = $pfe-stats/pfe-counters/pfe-hardware-info-cell-discard-count;
	var $pfe-hardware-fabric-discards = $pfe-stats/pfe-counters/pfe-hardware-fabric-discard-count;
	var $pfe-chip-input-checksum-errs = $pfe-stats/pfe-counters/pfe-chip-input-checksum-errors;
        var $pfe-chip-output-mtu-errs = $pfe-stats/pfe-counters/pfe-chip-output-mtu-errors;
	
/*	<output> "pfe input count = " _ $pfe-input-packets _ " pfe software drops = " _ $pfe-software-input-control-drops;*/
        call save_pfe_stats($file, $slot, $pfe-software-input-control-drops,
	 		    $pfe-software-input-high-drops,
	                    $pfe-software-input-medium-drops,
	                    $pfe-software-input-low-drops,
			    $pfe-software-output-low-drops,
	                    $pfe-hardware-input-drops,
	                    $pfe-hardware-timeout-discards,
	                    $pfe-hardware-truncated-key-discards,
	                    $pfe-hardware-bits-to-test-discards,
	                    $pfe-hardware-data-error-discards,
	                    $pfe-hardware-stack-underflow-discards,
	                    $pfe-hardware-stack-overflow-discards,
	                    $pfe-hardware-bad-route-discards,
	                    $pfe-hardware-nexthop-discards,
	                    $pfe-hardware-invalid-intf-discards,
	                    $pfe-hardware-info-cell-discards,
	                    $pfe-hardware-fabric-discards,
	                    $pfe-chip-input-checksum-errs,
                            $pfe-chip-output-mtu-errs);
      }
}

/*
* Given a FPC:
* Find value 0x1c for regiser 129, if exist log it
*/
template get_pfe_statistics( $slot ) {

    /* Build RPC and invoke it */
    var $rpc = <get-pfe-statistics> {
      <fpc> $slot;
    }

    var $result = jcs:invoke($rpc);

    /* Packet Forwarding Engine local traffic statistics */
    var $input-pkts = $result//pfe-local-traffic-statistics/pfe-input-packets;
    var $software-input-control-drops = $result//pfe-local-traffic-statistics/software-input-control-drops;
    var $software-input-high-drops = $result//pfe-local-traffic-statistics/software-input-high-drops;
    var $software-input-medium-drops = $result//pfe-local-traffic-statistics/software-input-medium-drops;
    var $software-input-low-drops = $result//pfe-local-traffic-statistics/software-input-low-drops;
    var $software-output-low-drops = $result//pfe-local-traffic-statistics/software-output-low-drops;
    var $hardware-input-drops = $result//pfe-local-traffic-statistics/hardware-input-drops;

    /* Packet Forwarding Engine hardware discard statistics */
    var $hardware-timeout-discards = $result//pfe-hardware-discard-statistics/timeout-discard;
    var $hardware-truncated-key-discards = $result//pfe-hardware-discard-statistics/truncated-key-discard;
    var $hardware-bits-to-test-discards = $result//pfe-hardware-discard-statistics/bits-to-test-discard;
    var $hardware-data-error-discards = $result//pfe-hardware-discard-statistics/data-error-discard;
    var $hardware-stack-underflow-discards = $result//pfe-hardware-discard-statistics/stack-underflow-discard;
    var $hardware-stack-overflow-discards = $result//pfe-hardware-discard-statistics/stack-overflow-discard;
    var $hardware-bad-route-discards = $result//pfe-hardware-discard-statistics/bad-route-discard;
    var $hardware-nexthop-discards = $result//pfe-hardware-discard-statistics/nexthop-discard;
    var $hardware-invalid-intf-discards = $result//pfe-hardware-discard-statistics/invalid-iif-discard;
    var $hardware-info-cell-discards = $result//pfe-hardware-discard-statistics/info-cell-discard;
    var $hardware-fabric-discards = $result//pfe-hardware-discard-statistics/fabric-discard;

    /* Packet Forwarding Engine Input IPv4 Header Checksum Error and Output MTU Errors */
    var $pfe-chip-input-checksum-errs = $result//pfe-chip-statistics/input-checksum;
    var $pfe-chip-output-mtu-errs = $result//pfe-chip-statistics/output-mtu;

    <pfe-counters> {
	<pfe-input-pkt-count> $input-pkts;
	<pfe-software-input-control-drop-count> $software-input-control-drops;
	<pfe-software-input-high-drop-count> $software-input-high-drops;
	<pfe-software-input-medium-drop-count> $software-input-medium-drops;
	<pfe-software-input-low-drop-count> $software-input-low-drops;
	<pfe-software-output-low-drop-count> $software-output-low-drops;
	<pfe-hardware-input-drop-count> $hardware-input-drops;
	<pfe-hardware-timeout-discard-count> $hardware-timeout-discards;
	<pfe-hardware-truncated-key-discard-count> $hardware-truncated-key-discards;
	<pfe-hardware-bits-to-test-discard-count> $hardware-bits-to-test-discards;
	<pfe-hardware-data-error-discard-count> $hardware-data-error-discards;
	<pfe-hardware-stack-underflow-discard-count> $hardware-stack-underflow-discards;
	<pfe-hardware-stack-overflow-discard-count> $hardware-stack-overflow-discards;
	<pfe-hardware-bad-route-discard-count> $hardware-bad-route-discards;
	<pfe-hardware-nexthop-discard-count> $hardware-nexthop-discards;
	<pfe-hardware-invalid-intf-discard-count> $hardware-invalid-intf-discards;
	<pfe-hardware-info-cell-discard-count> $hardware-info-cell-discards;
	<pfe-hardware-fabric-discard-count> $hardware-fabric-discards;
	<pfe-chip-input-checksum-errors> $pfe-chip-input-checksum-errs;
        <pfe-chip-output-mtu-errors> $pfe-chip-output-mtu-errs;
    }

}

/*template log_message($result, $fpc) {
var $syslog-message = "Warning!!! " _ $fpc _
	              " Invalied value for register 129: " _ $result; 
    expr jcs:syslog( "pfe.error", $syslog-message);
}*/



template save_pfe_stats ($file, $slot,
			 $pfe-software-input-control-drops,
	 		 $pfe-software-input-high-drops,
	                 $pfe-software-input-medium-drops,
	                 $pfe-software-input-low-drops,
                         $pfe-software-output-low-drops,
	                 $pfe-hardware-input-drops,
	                 $pfe-hardware-timeout-discards,
	                 $pfe-hardware-truncated-key-discards,
	                 $pfe-hardware-bits-to-test-discards,
	                 $pfe-hardware-data-error-discards,
	                 $pfe-hardware-stack-underflow-discards,
	                 $pfe-hardware-stack-overflow-discards,
	                 $pfe-hardware-bad-route-discards,
	                 $pfe-hardware-nexthop-discards,
	                 $pfe-hardware-invalid-intf-discards,
	                 $pfe-hardware-info-cell-discards,
	                 $pfe-hardware-fabric-discards,
	                 $pfe-chip-input-checksum-errs,
                         $pfe-chip-output-mtu-errs) {

    var $add-rpc = <add-accounting-file-record> {
        <file> $file;
        <layout> "PFE" _ $slot;
        <fields> "sft-in-c-drps,sft-in-h-drps,sft-in-m-drps,sft-in-l-drps,sft-out-l-drps,hrd-in-drps,hrd-tme-dscd,hrd-trnc-key-dscd,hrd-bts-to-tst-dscd,hrd-data-err-dscd,hrd-stck-under-dscd,hrd-stck-ovr-dscd,hrd-bad-rt-dscd,hrd-nxthp-dscd,hrd-invld-intf-dscd,hrd-info-cell-dscd,hrd-fabric-dscd,chip-inpt-chksm-errs,chip-out-mtu-errs";
        <data>  $pfe-software-input-control-drops _ "," _
		$pfe-software-input-high-drops _ "," _
	        $pfe-software-input-medium-drops _ "," _
	        $pfe-software-input-low-drops _ "," _
	        $pfe-software-output-low-drops _ "," _
	        $pfe-hardware-input-drops _ "," _
	        $pfe-hardware-timeout-discards _ "," _
	        $pfe-hardware-truncated-key-discards _ "," _
	        $pfe-hardware-bits-to-test-discards _ "," _
	        $pfe-hardware-data-error-discards _ "," _
	        $pfe-hardware-stack-underflow-discards _ "," _
	        $pfe-hardware-stack-overflow-discards _ "," _
	        $pfe-hardware-bad-route-discards _ "," _
	        $pfe-hardware-nexthop-discards _ "," _
	        $pfe-hardware-invalid-intf-discards _ "," _
	        $pfe-hardware-info-cell-discards _ "," _
	        $pfe-hardware-fabric-discards _ "," _
	        $pfe-chip-input-checksum-errs _ "," _
                $pfe-chip-output-mtu-errs;
    }

    /*<output> "openig and writting to the file";*/
    var $rs = jcs:invoke($add-rpc);
    /*copy-of $rs;*/
}


template get_saved_pfe_stats($file) {

var $rpc = <get-accounting-file-record-information> {
            <file> $file;
            <since> -340;
        }
        var $out = jcs:invoke($rpc);
        copy-of $out;
}
